#' @title An easy way to show  colors in ggplot2
#' @description the same function can see
#'  \code{\link[scales]{show_col}}, but it is a
#'  ggplot2 object. You can use it like the show_col()
#'  function in scales package, but it can save by ggsave() function.
#' @param  ncol the number f col
#' @param byrow logical
#' @param colors string about colors
#' @param label logical
#' @param number logical, the default is
#' @param size the size of label, the default is 1.
#' @param border  The color of  border
#' @export  show_color
#' @importFrom  ggplot2 ggplot geom_text geom_rect  geom_label
#'   theme_void
#' @importFrom grDevices rgb2hsv  col2rgb
#' @author Chai
#++++++++++++++++++++++++++
show_color <- function(colors, ncol, byrow = TRUE,
label = FALSE, number = FALSE, size = 1,
border = "black") {
len <- length(colors)
nrow <- ifelse(len %% ncol == 0, len / ncol, len %/% ncol + 1)
n <- nrow * ncol
s <- c(colors, rep("white", abs(n - len)))
x <- numeric(n)
y <- numeric(n)
if (byrow == TRUE) {
x <- rep(seq(1, by = 1, length.out = ncol), nrow)
y <- rep(seq(-1, by = -1, length.out = nrow), each = ncol)
} else {
x <- rep(seq(1, by = 1, length.out = ncol), each = nrow)
y <- rep(seq(-1, by = -1, length.out = nrow), ncol)
}
x2 <- x
y2 <- y + 1
d <- data.frame(
x = x - 1, y = y,
x2, y2,
col = s
)
ggplot() +
geom_rect(
data = d, aes(
xmin = x, xmax = x2,
ymin = y, ymax = y2,
fill = I(s)
),
colour = border
) +
theme_void() -> p
if (label == TRUE) {
col_v <- rgb2hsv(col2rgb(colors))[3, ]
v <- ifelse(col_v > 0.6, "black", "white")
v <- append(v, rep("white", abs(n - len)))
l <- s
col2 <- v
d1 <- data.frame(
x = x - 0.5, y = y + 0.5,
l, col2
)
if (number == TRUE) {
d1$l <- append(1:len, rep(0, abs(n - len)))
}
p <- p +
geom_text(aes(x, y, label = l, color = I(col2)),
data = d1,
size = 3.5 * size, fontface = "bold"
)
}
return(p)
}
setwd("~/Documents/color_palatte_cinema/source_images")
# runs on current directory of images
image_list <- list.files(".")
hex.list <- lapply(image_list, function(x) {
img <- load.image(x)
cutoff = 10
out <- getHexPrimaries(im2, cutoff)
p <- show_color(out, ncol=cutoff)
ggsave(p, file = "temp.png", height = 200, width = 1080, units = "px", dpi = 800)
img_bottom <- load.image("temp.png")
pout <- imappend(list(img,img_bottom), "y")
filename <- paste0("full_",x)
ggsave(pout, file = filename, height = 780, width = 1080, units = "px", dpi = 800)
return(out)
})
# had to install quartsx11
library(scales)
library(imager)
library(data.table)
# this function takes an image in imager's cimg format and
# returns the hex colour codes for the top [cutoff] colors by
# coverage area of the image.
getHexPrimaries <- function(img, cutoff){
#convert cimg to workable format
channel.labels <- c('R','G','B','A')[1:dim(img)[4]]
img <- as.data.table(as.data.frame(img))
img[,channel := factor(cc ,labels=channel.labels)]
img <- dcast(img, x+y ~ channel, value.var = "value")
#sort by unique rgb combinations and identify the primary colours
colours.sorted <- img[, .N, by=list(R,G,B)][order(-N)]
colours.sorted[,]
colours.sorted = colours.sorted[1:cutoff,]
#convert to hex
hex.primaries <-
apply(colours.sorted, 1, function(row){
hex <- rgb(row[1], row[2], row[3], maxColorValue=1)
hex
})
hex.primaries
}
# runs on current directory of images
image_list <- list.files(".")
hex.list <- lapply(image_list, function(x) {
img <- load.image(x)
cutoff = 10
out <- getHexPrimaries(im2, cutoff)
p <- show_color(out, ncol=cutoff)
ggsave(p, file = "temp.png", height = 200, width = 1080, units = "px", dpi = 800)
img_bottom <- load.image("temp.png")
pout <- imappend(list(img,img_bottom), "y")
filename <- paste0("full_",x)
ggsave(pout, file = filename, height = 780, width = 1080, units = "px", dpi = 800)
return(out)
})
# runs on current directory of images
image_list <- list.files(".")
hex.list <- lapply(image_list, function(x) {
img <- load.image(x)
cutoff = 10
out <- getHexPrimaries(img, cutoff)
p <- show_color(out, ncol=cutoff)
ggsave(p, file = "temp.png", height = 200, width = 1080, units = "px", dpi = 800)
img_bottom <- load.image("temp.png")
pout <- imappend(list(img,img_bottom), "y")
filename <- paste0("full_",x)
ggsave(pout, file = filename, height = 780, width = 1080, units = "px", dpi = 800)
return(out)
})
# runs on current directory of images
image_list <- list.files(".")
hex.list <- lapply(image_list, function(x) {
img <- load.image(x)
cutoff = 10
out <- getHexPrimaries(img, cutoff)
p <- show_color(out, ncol=cutoff)
ggsave(p, file = "temp.png", height = 200, width = 1080, units = "px", dpi = 800)
img_bottom <- load.image("temp.png")
pout <- imappend(list(img,img_bottom), "y")
filename <- paste0("full_",x)
ggsave(pout, file = filename, height = 780, width = 1080, units = "px", dpi = 800)
return(out)
})
library(ggplot2)
# runs on current directory of images
image_list <- list.files(".")
hex.list <- lapply(image_list, function(x) {
img <- load.image(x)
cutoff = 10
out <- getHexPrimaries(img, cutoff)
p <- show_color(out, ncol=cutoff)
ggsave(p, file = "temp.png", height = 200, width = 1080, units = "px", dpi = 800)
img_bottom <- load.image("temp.png")
pout <- imappend(list(img,img_bottom), "y")
filename <- paste0("full_",x)
ggsave(pout, file = filename, height = 780, width = 1080, units = "px", dpi = 800)
return(out)
})
plot(img)
im <- load.image("Documents/color_palatte_cinema/Source_images/Dunkirk.jpg")
im <- load.image("Dunkirk.jpg")
cutoff=10
#convert cimg to workable format
channel.labels <- c('R','G','B','A')[1:dim(img)[4]]
img <- load.image("Documents/color_palatte_cinema/Source_images/Dunkirk.jpg")
img <- load.image("Dunkirk.jpg")
#convert cimg to workable format
channel.labels <- c('R','G','B','A')[1:dim(img)[4]]
img <- as.data.table(as.data.frame(img))
img[,channel := factor(cc ,labels=channel.labels)]
img <- dcast(img, x+y ~ channel, value.var = "value")
#sort by unique rgb combinations and identify the primary colours
colours.sorted <- img[, .N, by=list(R,G,B)][order(-N)]
colours.sorted[,]
colours.sorted[c(1:10),]
colours.sorted2 = colours.sorted[1:cutoff,]
#convert to hex
hex.primaries <-
apply(colours.sorted, 1, function(row){
hex <- rgb(row[1], row[2], row[3], maxColorValue=1)
hex
})
hex.primaries
show_col(hex.primaries[1:10], ncol=cutoff, borders = "white")
show_col(hex.primaries[10:20], ncol=cutoff, borders = "white")
show_col(hex.primaries[1:10], ncol=cutoff, borders = "white")
out <- getHexPrimaries(img, cutoff)
out <- getHexPrimaries(img, cutoff)
img
cutoff
out
out <- getHexPrimaries(img, cutoff)
getHexPrimaries <- function(img, cutoff){
#convert cimg to workable format
channel.labels <- c('R','G','B','A')[1:dim(img)[4]]
img <- as.data.table(as.data.frame(img))
img[,channel := factor(cc ,labels=channel.labels)]
img <- dcast(img, x+y ~ channel, value.var = "value")
#sort by unique rgb combinations and identify the primary colours
colours.sorted <- img[, .N, by=list(R,G,B)][order(-N)]
colours.sorted[,]
colours.sorted = colours.sorted[1:cutoff,]
#convert to hex
hex.primaries <-
apply(colours.sorted, 1, function(row){
hex <- rgb(row[1], row[2], row[3], maxColorValue=1)
hex
})
hex.primaries
}
getHexPrimaries(img,5)
plot(img)
